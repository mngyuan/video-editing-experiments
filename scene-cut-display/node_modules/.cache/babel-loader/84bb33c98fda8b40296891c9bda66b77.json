{"ast":null,"code":"var _jsxFileName = \"/Users/mngyuan/git/gid/video-editing-experiments/scene-cut-display/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useMeasure } from 'react-use';\nimport * as Papa from 'papaparse';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Filmstrip = _ref => {\n  _s();\n\n  let {\n    findScene\n  } = _ref;\n  const [ref, {\n    width,\n    height\n  }] = useMeasure(); // 1=whole film, 0=frame by frame\n\n  const zoomLevel = 1;\n  const frameheight = 100;\n  const frameaspectratio = 1912 / 1032;\n  const framewidth = frameheight * frameaspectratio;\n  const framesonstrip = Math.floor(width / framewidth);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"filmstrip\",\n    ref: ref,\n    children: [...Array(framesonstrip).keys()].map(i => /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `${process.env.PUBLIC_URL}/drivemycar/sceneimages/${findScene(1 / framesonstrip * i)['Scene Number'].padStart(3, '0')}.jpg`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Filmstrip, \"UDdfYXvoyIMMMZL2peE+OYo06mo=\", false, function () {\n  return [useMeasure];\n});\n\n_c = Filmstrip;\n\nfunction App() {\n  _s2();\n\n  const [sceneData, setSceneData] = useState([]);\n  useEffect(() => {\n    async function fetchCSV() {\n      const resp = await fetch(`${process.env.PUBLIC_URL}/drivemycar/drivemycarscenes.csv`);\n      const rawcsv = await resp.text();\n      const sceneCSV = Papa.parse(rawcsv, {\n        header: true\n      }); // papaparse results in the last object being empty, not sure why\n\n      setSceneData(sceneCSV.data.slice(0, sceneCSV.data.length - 1));\n    }\n\n    fetchCSV();\n  }, []);\n  const lastFrame = sceneData.length > 0 ? sceneData[sceneData.length - 1]['End Frame'] : 0;\n\n  const findScene = percent => {\n    const frameNeedle = Math.round(percent * lastFrame);\n\n    for (const scene of sceneData) {\n      if (frameNeedle <= scene['End Frame'] && frameNeedle >= scene['Start Frame']) {\n        return scene;\n      }\n    }\n  };\n\n  useEffect(() => {\n    async function fetchImages() {\n      // fetch all scene images\n      await Promise.all(sceneData.map(scene => fetch(`${process.env.PUBLIC_URL}/drivemycar/sceneimages/${scene['Scene Number'].padStart(3, '0')}.jpg`)));\n    }\n\n    fetchImages();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: sceneData.length > 0 ? /*#__PURE__*/_jsxDEV(Filmstrip, {\n      findScene: findScene\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 31\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"XBXtmwCMTdL8CsnIJmuPg4B5ZSk=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Filmstrip\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/mngyuan/git/gid/video-editing-experiments/scene-cut-display/src/App.js"],"names":["useEffect","useState","useMeasure","Papa","Filmstrip","findScene","ref","width","height","zoomLevel","frameheight","frameaspectratio","framewidth","framesonstrip","Math","floor","Array","keys","map","i","process","env","PUBLIC_URL","padStart","App","sceneData","setSceneData","fetchCSV","resp","fetch","rawcsv","text","sceneCSV","parse","header","data","slice","length","lastFrame","percent","frameNeedle","round","scene","fetchImages","Promise","all"],"mappings":"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","sourcesContent":["import {useEffect, useState} from 'react';\nimport {useMeasure} from 'react-use';\nimport * as Papa from 'papaparse';\n\nimport './App.css';\n\nconst Filmstrip = ({findScene}) => {\n  const [ref, {width, height}] = useMeasure();\n  // 1=whole film, 0=frame by frame\n  const zoomLevel = 1;\n  const frameheight = 100;\n  const frameaspectratio = 1912 / 1032;\n  const framewidth = frameheight * frameaspectratio;\n  const framesonstrip = Math.floor(width / framewidth);\n\n  return (\n    <div className=\"filmstrip\" ref={ref}>\n      {[...Array(framesonstrip).keys()].map((i) => (\n        <img\n          src={`${process.env.PUBLIC_URL}/drivemycar/sceneimages/${findScene(\n            (1 / framesonstrip) * i,\n          )['Scene Number'].padStart(3, '0')}.jpg`}\n        />\n      ))}\n    </div>\n  );\n};\n\nfunction App() {\n  const [sceneData, setSceneData] = useState([]);\n  useEffect(() => {\n    async function fetchCSV() {\n      const resp = await fetch(\n        `${process.env.PUBLIC_URL}/drivemycar/drivemycarscenes.csv`,\n      );\n      const rawcsv = await resp.text();\n      const sceneCSV = Papa.parse(rawcsv, {header: true});\n      // papaparse results in the last object being empty, not sure why\n      setSceneData(sceneCSV.data.slice(0, sceneCSV.data.length - 1));\n    }\n    fetchCSV();\n  }, []);\n\n  const lastFrame =\n    sceneData.length > 0 ? sceneData[sceneData.length - 1]['End Frame'] : 0;\n  const findScene = (percent) => {\n    const frameNeedle = Math.round(percent * lastFrame);\n    for (const scene of sceneData) {\n      if (\n        frameNeedle <= scene['End Frame'] &&\n        frameNeedle >= scene['Start Frame']\n      ) {\n        return scene;\n      }\n    }\n  };\n\n  useEffect(() => {\n    async function fetchImages() {\n      // fetch all scene images\n      await Promise.all(\n        sceneData.map((scene) =>\n          fetch(\n            `${process.env.PUBLIC_URL}/drivemycar/sceneimages/${scene[\n              'Scene Number'\n            ].padStart(3, '0')}.jpg`,\n          ),\n        ),\n      );\n    }\n    fetchImages();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {sceneData.length > 0 ? <Filmstrip findScene={findScene} /> : null}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}