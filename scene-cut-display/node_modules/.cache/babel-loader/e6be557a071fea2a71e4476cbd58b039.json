{"ast":null,"code":"var _jsxFileName = \"/Users/mngyuan/git/gid/video-editing-experiments/scene-cut-display/scene-cut-display/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useMeasure } from 'react-use';\nimport * as Papa from 'papaparse';\nimport './App.css';\nimport rawSceneCSV from './assets/drivemycar/drivemycarscenes.csv';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nawait fetch();\nconst sceneCSV = Papa.parse(rawSceneCSV, {\n  header: true\n});\ndebugger; // papaparse results in the last object being empty, not sure why\n\nconst sceneData = sceneCSV.data.slice(0, sceneCSV.data.length - 1);\nconst lastFrame = sceneData[sceneData.length - 1]['End Frame'];\n\nconst findScene = percent => {\n  const frameNeedle = Math.round(percent * lastFrame);\n\n  for (const scene of sceneData) {\n    if (frameNeedle <= scene['End Frame'] && frameNeedle >= scene['Start Frame']) {\n      return scene;\n    }\n  }\n};\n\nconst Filmstrip = () => {\n  _s();\n\n  const [ref, {\n    width,\n    height\n  }] = useMeasure(); // 1=whole film, 0=frame by frame\n\n  const zoomLevel = 1;\n  const frameheight = 100;\n  const frameaspectratio = 1912 / 1032;\n  const framewidth = frameheight * frameaspectratio;\n  const framesonstrip = Math.floor(width / framewidth);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    children: [...Array(framesonstrip).keys()].map(i => /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `/assets/drivemycar/sceneimages/${findScene(1 / framesonstrip * i)['Scene Number'].padStart(3, '0')}.jpg`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Filmstrip, \"UDdfYXvoyIMMMZL2peE+OYo06mo=\", false, function () {\n  return [useMeasure];\n});\n\n_c = Filmstrip;\n\nfunction App() {\n  _s2();\n\n  useEffect(() => {\n    async function fetchImages() {\n      // fetch all scene images\n      await Promise.all(sceneData.map(scene => fetch(`${process.env.PUBLIC_URL}/drivemycar/sceneimages/${scene['Scene Number'].padStart(3, '0')}.jpg`)));\n    }\n\n    fetchImages();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 10\n  }, this);\n}\n\n_s2(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Filmstrip\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/mngyuan/git/gid/video-editing-experiments/scene-cut-display/scene-cut-display/src/App.js"],"names":["useEffect","useState","useMeasure","Papa","rawSceneCSV","fetch","sceneCSV","parse","header","sceneData","data","slice","length","lastFrame","findScene","percent","frameNeedle","Math","round","scene","Filmstrip","ref","width","height","zoomLevel","frameheight","frameaspectratio","framewidth","framesonstrip","floor","Array","keys","map","i","padStart","App","fetchImages","Promise","all","process","env","PUBLIC_URL"],"mappings":";;;;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,SAAQC,UAAR,QAAyB,WAAzB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AAEA,OAAO,WAAP;AACA,OAAOC,WAAP,MAAwB,0CAAxB;;AAEA,MAAMC,KAAK,EAAX;AAEA,MAAMC,QAAQ,GAAGH,IAAI,CAACI,KAAL,CAAWH,WAAX,EAAwB;AAACI,EAAAA,MAAM,EAAE;AAAT,CAAxB,CAAjB;AACA,S,CACA;;AACA,MAAMC,SAAS,GAAGH,QAAQ,CAACI,IAAT,CAAcC,KAAd,CAAoB,CAApB,EAAuBL,QAAQ,CAACI,IAAT,CAAcE,MAAd,GAAuB,CAA9C,CAAlB;AACA,MAAMC,SAAS,GAAGJ,SAAS,CAACA,SAAS,CAACG,MAAV,GAAmB,CAApB,CAAT,CAAgC,WAAhC,CAAlB;;AACA,MAAME,SAAS,GAAIC,OAAD,IAAa;AAC7B,QAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAO,GAAGF,SAArB,CAApB;;AACA,OAAK,MAAMM,KAAX,IAAoBV,SAApB,EAA+B;AAC7B,QACEO,WAAW,IAAIG,KAAK,CAAC,WAAD,CAApB,IACAH,WAAW,IAAIG,KAAK,CAAC,aAAD,CAFtB,EAGE;AACA,aAAOA,KAAP;AACD;AACF;AACF,CAVD;;AAYA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,GAAD,EAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAN,IAAyBrB,UAAU,EAAzC,CADsB,CAEtB;;AACA,QAAMsB,SAAS,GAAG,CAAlB;AACA,QAAMC,WAAW,GAAG,GAApB;AACA,QAAMC,gBAAgB,GAAG,OAAO,IAAhC;AACA,QAAMC,UAAU,GAAGF,WAAW,GAAGC,gBAAjC;AACA,QAAME,aAAa,GAAGX,IAAI,CAACY,KAAL,CAAWP,KAAK,GAAGK,UAAnB,CAAtB;AAEA,sBACE;AAAK,IAAA,GAAG,EAAEN,GAAV;AAAA,cACG,CAAC,GAAGS,KAAK,CAACF,aAAD,CAAL,CAAqBG,IAArB,EAAJ,EAAiCC,GAAjC,CAAsCC,CAAD,iBACpC;AACE,MAAA,GAAG,EAAG,kCAAiCnB,SAAS,CAC7C,IAAIc,aAAL,GAAsBK,CADwB,CAAT,CAErC,cAFqC,EAErBC,QAFqB,CAEZ,CAFY,EAET,GAFS,CAEJ;AAHrC;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CApBD;;GAAMd,S;UAC2BlB,U;;;KAD3BkB,S;;AAsBN,SAASe,GAAT,GAAe;AAAA;;AACbnC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeoC,WAAf,GAA6B;AAC3B;AACA,YAAMC,OAAO,CAACC,GAAR,CACJ7B,SAAS,CAACuB,GAAV,CAAeb,KAAD,IACZd,KAAK,CACF,GAAEkC,OAAO,CAACC,GAAR,CAAYC,UAAW,2BAA0BtB,KAAK,CACvD,cADuD,CAAL,CAElDe,QAFkD,CAEzC,CAFyC,EAEtC,GAFsC,CAEjC,MAHhB,CADP,CADI,CAAN;AASD;;AACDE,IAAAA,WAAW;AACZ,GAdQ,EAcN,EAdM,CAAT;AAgBA,sBAAO;AAAK,IAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;IAlBQD,G;;MAAAA,G;AAoBT,eAAeA,GAAf","sourcesContent":["import {useEffect, useState} from 'react';\nimport {useMeasure} from 'react-use';\nimport * as Papa from 'papaparse';\n\nimport './App.css';\nimport rawSceneCSV from './assets/drivemycar/drivemycarscenes.csv';\n\nawait fetch();\n\nconst sceneCSV = Papa.parse(rawSceneCSV, {header: true});\ndebugger;\n// papaparse results in the last object being empty, not sure why\nconst sceneData = sceneCSV.data.slice(0, sceneCSV.data.length - 1);\nconst lastFrame = sceneData[sceneData.length - 1]['End Frame'];\nconst findScene = (percent) => {\n  const frameNeedle = Math.round(percent * lastFrame);\n  for (const scene of sceneData) {\n    if (\n      frameNeedle <= scene['End Frame'] &&\n      frameNeedle >= scene['Start Frame']\n    ) {\n      return scene;\n    }\n  }\n};\n\nconst Filmstrip = () => {\n  const [ref, {width, height}] = useMeasure();\n  // 1=whole film, 0=frame by frame\n  const zoomLevel = 1;\n  const frameheight = 100;\n  const frameaspectratio = 1912 / 1032;\n  const framewidth = frameheight * frameaspectratio;\n  const framesonstrip = Math.floor(width / framewidth);\n\n  return (\n    <div ref={ref}>\n      {[...Array(framesonstrip).keys()].map((i) => (\n        <img\n          src={`/assets/drivemycar/sceneimages/${findScene(\n            (1 / framesonstrip) * i,\n          )['Scene Number'].padStart(3, '0')}.jpg`}\n        />\n      ))}\n    </div>\n  );\n};\n\nfunction App() {\n  useEffect(() => {\n    async function fetchImages() {\n      // fetch all scene images\n      await Promise.all(\n        sceneData.map((scene) =>\n          fetch(\n            `${process.env.PUBLIC_URL}/drivemycar/sceneimages/${scene[\n              'Scene Number'\n            ].padStart(3, '0')}.jpg`,\n          ),\n        ),\n      );\n    }\n    fetchImages();\n  }, []);\n\n  return <div className=\"App\"></div>;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}